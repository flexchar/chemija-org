---
import { getArticles, type Article } from '@/utils/sanity';
import { urlFor } from '@/utils/image';
import { PortableText } from 'astro-portabletext';
import Layout from '@/layouts/Layout.astro';
import YouTube from '@/components/YouTube.astro';
import { formatDate } from '@/utils/index';

// Define getStaticPaths to generate all article routes at build time
export async function getStaticPaths() {
    const articles = await getArticles(Number.MAX_SAFE_INTEGER); // Get up to 100 articles, adjust if needed

    return articles.map((article: Article) => ({
        params: { slug: article.slug!.current },
        props: { article },
    }));
}

// Get the article from props or fetch if needed
const { article } = Astro.props;

const articleData = article;
console.log(articleData);
---

<Layout title={articleData.title || 'Straipsnis'}>
    <article class="container mx-auto px-4 py-8 max-w-4xl">
        <header class="mb-8">
            {
                articleData.categories &&
                    articleData.categories.map((category) => (
                        <span class="badge badge-primary mb-3">
                            {category.title}
                        </span>
                    ))
            }
            <h1 class="text-4xl font-bold mb-4">
                {articleData.title}
            </h1>

            <div class="flex items-center gap-4 text-sm opacity-75">
                <span class="flex items-center gap-1">
                    Atnaujinta: {formatDate(articleData._updatedAt)}
                </span>

                <time
                    class="flex items-center gap-1"
                    datetime={articleData._createdAt}
                >
                    Paskelbta:
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <rect width="18" height="18" x="3" y="4" rx="2" ry="2"
                        ></rect>
                        <line x1="16" x2="16" y1="2" y2="6"></line>
                        <line x1="8" x2="8" y1="2" y2="6"></line>
                        <line x1="3" x2="21" y1="10" y2="10"></line>
                    </svg>
                    {formatDate(articleData._createdAt)}
                </time>

                <span class="flex items-center gap-1">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"
                        ></path>
                        <circle cx="12" cy="12" r="3"></circle>
                    </svg>
                    <span id="viewCount">{articleData.views}</span> peržiūrų
                </span>
            </div>
        </header>

        {
            articleData.mainImage?.asset && (
                <div class="mb-8 rounded-lg overflow-hidden shadow-lg">
                    <img
                        src={urlFor(articleData.mainImage?.asset)
                            .width(800)
                            .url()}
                        alt={articleData.title || 'Article image'}
                        class="w-full h-auto object-cover"
                    />
                </div>
            )
        }

        <div class="prose prose-lg max-w-none">
            <PortableText
                value={articleData.body!}
                components={{
                    type: {
                        youtube: YouTube,
                    },
                }}
            />
        </div>
    </article>
</Layout>
