---
import Layout from '@/layouts/Layout.astro';
import { getExams } from '@/utils/sanity';

const exams = await getExams();

// Extract unique years from exams for the filter
const examYears = [
    ...new Set(
        exams
            .map((exam) =>
                exam.year ? new Date(exam.year).getFullYear() : null,
            )
            .filter((year) => year !== null),
    ),
].sort((a, b) => b - a); // Sort years in descending order
---

<Layout title="Chemijos egzaminai">
    <div class="exam-page">
        <header class="px-2 sm:px-0">
            <h1 class="text-3xl font-bold mb-2">Chemijos egzaminai</h1>
            <p>
                Chemijos valstybinių bei mokyklinių egzaminų užduočių ir
                atsakymų archyvas. Egzaminai su atsakymais nuo 1996 metų.
            </p>
            <div class="flex items-center">
                <span class="flex-1 hidden md:inline"></span>

                <label class="py-4 mr-2">
                    <input
                        type="radio"
                        name="viewMode"
                        value="download"
                        class="radio radio-sm mr-1 align-middle"
                        id="downloadRadio"
                    />
                    <span class="align-middle">Siųstis failus</span>
                </label>
                <label class="py-4">
                    <input
                        type="radio"
                        name="viewMode"
                        value="view"
                        class="radio radio-sm mr-1 align-middle"
                        id="viewRadio"
                        checked
                    />
                    <span class="align-middle">Žiūrėti naršyklėje</span>
                </label>
            </div>
        </header>

        <div>
            <div class="form-control w-full max-w-xs mb-4">
                <label class="label">
                    <span class="label-text"> Filtruoti pagal metus </span>
                </label>
                <select
                    class="select select-bordered w-full max-w-xs"
                    id="yearFilter"
                >
                    <option value="">Visi metai</option>
                    {
                        examYears.map((year) => (
                            <option value={year}>{year}</option>
                        ))
                    }
                </select>
            </div>

            <table class="table">
                <thead>
                    <tr class="bg-primary text-primary-content">
                        <th>Metai</th>
                        <th>Tipas</th>
                        <th>Sesija</th>
                        <th>Užduotys</th>
                        <th>Atsakymai</th>
                    </tr>
                </thead>
                <tbody id="examsTableBody">
                    {
                        exams.map((exam) => (
                            <tr
                                class="hover:bg-base-300"
                                data-year={
                                    exam.year
                                        ? new Date(exam.year).getFullYear()
                                        : ''
                                }
                            >
                                <td>
                                    {exam.year
                                        ? new Date(exam.year).getFullYear()
                                        : 'N/A'}
                                </td>
                                <td>{exam.level || 'N/A'}</td>
                                <td>{exam.session || 'Pagrindinė'}</td>
                                <td>
                                    {exam.questions_url ? (
                                        <a
                                            href={exam.questions_url}
                                            class="link link-primary font-semibold"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            data-file-url={exam.questions_url}
                                            data-download-name={`${exam.year ? new Date(exam.year).getFullYear() : ''} chemijos ${exam.level || ''} egzaminas - užduotys`}
                                        >
                                            Užduotys
                                        </a>
                                    ) : (
                                        <span class="text-opacity-50">
                                            Nėra
                                        </span>
                                    )}
                                </td>
                                <td>
                                    {exam.answers_url ? (
                                        <a
                                            href={exam.answers_url}
                                            class="link link-primary font-semibold"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            data-file-url={exam.answers_url}
                                            data-download-name={`${exam.year ? new Date(exam.year).getFullYear() : ''} chemijos ${exam.level || ''} egzaminas - atsakymai`}
                                        >
                                            Atsakymai
                                        </a>
                                    ) : (
                                        <span class="text-opacity-50">
                                            Nėra
                                        </span>
                                    )}
                                </td>
                            </tr>
                        ))
                    }
                </tbody>
            </table>
        </div>
    </div>
</Layout>

<script>
    // Handle the download/view toggle functionality
    document.addEventListener('DOMContentLoaded', () => {
        const downloadRadio = document.getElementById(
            'downloadRadio',
        ) as HTMLInputElement;
        const viewRadio = document.getElementById(
            'viewRadio',
        ) as HTMLInputElement;
        const fileLinks = document.querySelectorAll('a[data-file-url]');
        const yearFilter = document.getElementById(
            'yearFilter',
        ) as HTMLSelectElement;

        const updateLinks = () => {
            const isDownload = downloadRadio.checked;

            fileLinks.forEach((link) => {
                const fileUrl = link.getAttribute('data-file-url') || '';
                const downloadName =
                    link.getAttribute('data-download-name') || '';

                if (isDownload) {
                    link.setAttribute(
                        'href',
                        `${fileUrl}?dl=${downloadName.toLowerCase()}`,
                    );
                } else {
                    link.setAttribute('href', fileUrl);
                }
            });
        };

        // Filter exams by year
        const filterExamsByYear = () => {
            const selectedYear = yearFilter.value;
            const rows = document.querySelectorAll('#examsTableBody tr');

            rows.forEach((row) => {
                const rowYear = row.getAttribute('data-year');
                if (!selectedYear || rowYear === selectedYear) {
                    row.classList.remove('hidden');
                } else {
                    row.classList.add('hidden');
                }
            });
        };

        // Initialize links
        updateLinks();

        // Add event listeners
        downloadRadio.addEventListener('change', updateLinks);
        viewRadio.addEventListener('change', updateLinks);
        yearFilter.addEventListener('change', filterExamsByYear);
    });
</script>
