/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Table = {
  _type: "table";
  rows?: Array<{
    cells?: Array<string>;
    _type: "row";
    _key: string;
  }>;
};

export type Youtube = {
  _type: "youtube";
  url?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Youtube | {
  _key: string;
} & Table>;

export type Questionnaire = {
  _id: string;
  _type: "questionnaire";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  category?: string;
  question?: string;
  answer?: string;
  points?: number;
};

export type Exam = {
  _id: string;
  _type: "exam";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: string;
  level?: "Valstybinis" | "Mokyklinis";
  session?: "Pagrindin\u0117 sesija" | "Pakartotin\u0117 sesija" | "Pavyzdin\u0117 u\u017Eduotis";
  answers?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  questions?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  notes?: string;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Article = {
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: BlockContent;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  legacy_urls?: Array<string>;
  views?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Geopoint | Table | Youtube | BlockContent | Questionnaire | Exam | SanityFileAsset | Category | Article | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../astro-app/src/utils/sanity.ts
// Variable: articlesQuery
// Query: *[_type == "article" && defined(slug.current)] {        ...,        "categories": categories[]->{ _id, title }    } | order(publishedAt desc) [$offset...$limit]
export type ArticlesQueryResult = Array<{
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: BlockContent;
  categories: Array<{
    _id: string;
    title: string | null;
  }> | null;
  legacy_urls?: Array<string>;
  views?: number;
}>;
// Variable: articlesCountQuery
// Query: count(*[_type == "article" && defined(slug.current)])
export type ArticlesCountQueryResult = number;
// Variable: latestArticlesQuery
// Query: *[_type == "article" && defined(slug.current)] {        ...,        "categories": categories[]->{ _id, title }    } | order(publishedAt desc) [0...$limit]
export type LatestArticlesQueryResult = Array<{
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: BlockContent;
  categories: Array<{
    _id: string;
    title: string | null;
  }> | null;
  legacy_urls?: Array<string>;
  views?: number;
}>;
// Variable: articleQuery
// Query: *[_type == "article" && slug.current == $slug] {        ...,        "categories": categories[]->{ _id, title }    }[0]
export type ArticleQueryResult = {
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body?: BlockContent;
  categories: Array<{
    _id: string;
    title: string | null;
  }> | null;
  legacy_urls?: Array<string>;
  views?: number;
} | null;
// Variable: categoriesQuery
// Query: *[_type == "category"]
export type CategoriesQueryResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
}>;
// Variable: examsQuery
// Query: *[_type == "exam"] | order(year desc) [$offset...$limit]
export type ExamsQueryResult = Array<{
  _id: string;
  _type: "exam";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: string;
  level?: "Mokyklinis" | "Valstybinis";
  session?: "Pagrindin\u0117 sesija" | "Pakartotin\u0117 sesija" | "Pavyzdin\u0117 u\u017Eduotis";
  answers?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  questions?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  notes?: string;
}>;
// Variable: latestExamsQuery
// Query: *[_type == "exam"] | order(year desc) [0...$limit]
export type LatestExamsQueryResult = Array<{
  _id: string;
  _type: "exam";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  year?: string;
  level?: "Mokyklinis" | "Valstybinis";
  session?: "Pagrindin\u0117 sesija" | "Pakartotin\u0117 sesija" | "Pavyzdin\u0117 u\u017Eduotis";
  answers?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  questions?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  notes?: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"article\" && defined(slug.current)] {\n        ...,\n        \"categories\": categories[]->{ _id, title }\n    } | order(publishedAt desc) [$offset...$limit]": ArticlesQueryResult;
    "count(*[_type == \"article\" && defined(slug.current)])": ArticlesCountQueryResult;
    "*[_type == \"article\" && defined(slug.current)] {\n        ...,\n        \"categories\": categories[]->{ _id, title }\n    } | order(publishedAt desc) [0...$limit]": LatestArticlesQueryResult;
    "*[_type == \"article\" && slug.current == $slug] {\n        ...,\n        \"categories\": categories[]->{ _id, title }\n    }[0]": ArticleQueryResult;
    "*[_type == \"category\"]": CategoriesQueryResult;
    "*[_type == \"exam\"] | order(year desc) [$offset...$limit]": ExamsQueryResult;
    "*[_type == \"exam\"] | order(year desc) [0...$limit]": LatestExamsQueryResult;
  }
}
